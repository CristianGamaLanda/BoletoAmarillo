package adminboletos;

import java.awt.Color;
import java.awt.Event;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class BOLETOAMARILLO extends javax.swing.JFrame {

    /**
     * Creates new form BOLETOAMARILLO
     */
    private int numeros = 0, momentodespues = 0, entrada, boleto, fecha, horai, horaf, minutosi, minutosf, precio = 0, nhora = 0, nminutos = 0; //nueva = 1;//nueva=1 O 879
    private int e1=0,e2=0;
    private String tarifa, fechatxt, e1i,e1f,e2i,e2f;
    private JDialog popup = new JDialog();
    private JLabel mensaje = new JLabel();
    private Toolkit notificacion = Toolkit.getDefaultToolkit();
    private ArrayList<Integer> tabla = new ArrayList<Integer>(), numimporte = new ArrayList<Integer>();

    public BOLETOAMARILLO() throws IOException {
        mensaje.setVerticalTextPosition(JLabel.CENTER);

        popup.setLayout(new FlowLayout());
        popup.setSize(300, 100);
        popup.setLocation(280, 250);
        popup.setType(Type.UTILITY);
        popup.add(mensaje);
        this.setIconImage(ImageIO.read(new File("BOLETO AMARILLO.png")));
        this.getContentPane().setBackground(new java.awt.Color(253, 185, 0));
        initComponents();
        CrearExcel();
        tCodigo.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGeneral = new javax.swing.JButton();
        bSello = new javax.swing.JButton();
        bComex = new javax.swing.JButton();
        bStarbucks = new javax.swing.JButton();
        bCinemex = new javax.swing.JButton();
        bCortesia = new javax.swing.JButton();
        bProveedor = new javax.swing.JButton();
        bBanorte = new javax.swing.JButton();
        tCodigo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tEntrada = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tBoleto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tEstancia = new javax.swing.JTextField();
        tHoraent = new javax.swing.JTextField();
        tHorasal = new javax.swing.JTextField();
        tImporte = new javax.swing.JTextField();
        tFecha = new javax.swing.JTextField();
        bPerdido = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        rManual = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        bGuardar = new javax.swing.JButton();
        bAgregar = new javax.swing.JButton();
        bAmbulancia = new javax.swing.JButton();
        bSanPablo = new javax.swing.JButton();
        bLimpiar = new javax.swing.JButton();
        lYaexiste = new javax.swing.JLabel();
        sAuto = new javax.swing.JSlider();
        jLabel11 = new javax.swing.JLabel();
        bPension = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BOLETO AMARILLO");
        setBackground(new java.awt.Color(253, 183, 0));
        setResizable(false);

        bGeneral.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bGeneral.setText("GENERAL");
        bGeneral.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bGeneral.setBorderPainted(false);
        bGeneral.setEnabled(false);
        bGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGeneralActionPerformed(evt);
            }
        });

        bSello.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bSello.setText("CON SELLO");
        bSello.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bSello.setBorderPainted(false);
        bSello.setEnabled(false);
        bSello.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelloActionPerformed(evt);
            }
        });

        bComex.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bComex.setForeground(new java.awt.Color(7, 177, 224));
        bComex.setText("COMEX");
        bComex.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bComex.setBorderPainted(false);
        bComex.setEnabled(false);
        bComex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bComexActionPerformed(evt);
            }
        });

        bStarbucks.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bStarbucks.setForeground(new java.awt.Color(0, 112, 74));
        bStarbucks.setText("STARBUCKS");
        bStarbucks.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bStarbucks.setBorderPainted(false);
        bStarbucks.setEnabled(false);
        bStarbucks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStarbucksActionPerformed(evt);
            }
        });

        bCinemex.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bCinemex.setForeground(new java.awt.Color(255, 0, 127));
        bCinemex.setText("CINEMEX");
        bCinemex.setToolTipText("");
        bCinemex.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bCinemex.setBorderPainted(false);
        bCinemex.setEnabled(false);
        bCinemex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCinemexActionPerformed(evt);
            }
        });

        bCortesia.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bCortesia.setText("CORTESIA");
        bCortesia.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bCortesia.setBorderPainted(false);
        bCortesia.setEnabled(false);
        bCortesia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCortesiaActionPerformed(evt);
            }
        });

        bProveedor.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bProveedor.setText("PROVEEDOR");
        bProveedor.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bProveedor.setBorderPainted(false);
        bProveedor.setEnabled(false);
        bProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProveedorActionPerformed(evt);
            }
        });

        bBanorte.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bBanorte.setForeground(new java.awt.Color(255, 0, 0));
        bBanorte.setText("BANORTE");
        bBanorte.setToolTipText("");
        bBanorte.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bBanorte.setBorderPainted(false);
        bBanorte.setEnabled(false);
        bBanorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBanorteActionPerformed(evt);
            }
        });

        tCodigo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tCodigo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tCodigo.setSelectionColor(new java.awt.Color(255, 0, 51));
        tCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCodigoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CODIGO BOLETO");

        tEntrada.setEditable(false);
        tEntrada.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tEntrada.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ENTRADA");

        tBoleto.setEditable(false);
        tBoleto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tBoleto.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("BOLETO");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("HORA ENT.");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("HORA SAL.");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("FECHA");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("IMPORTE");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("ESTANCIA");

        tEstancia.setEditable(false);
        tEstancia.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tEstancia.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tHoraent.setEditable(false);
        tHoraent.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tHoraent.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tHorasal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tHorasal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tHorasal.setToolTipText("Formato 0000 de 24Hrs");
        tHorasal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tHorasalActionPerformed(evt);
            }
        });

        tImporte.setEditable(false);
        tImporte.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tImporte.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tImporte.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tFecha.setEditable(false);
        tFecha.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tFecha.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tFechaActionPerformed(evt);
            }
        });

        bPerdido.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bPerdido.setText("PERDIDO");
        bPerdido.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bPerdido.setBorderPainted(false);
        bPerdido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPerdidoActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 4));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("TARIFA");

        rManual.setBackground(new java.awt.Color(253, 183, 0));
        rManual.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rManual.setSelected(true);
        rManual.setText("MANUAL");
        rManual.setFocusPainted(false);
        rManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rManualActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("$");

        bGuardar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bGuardar.setText("GUARDAR");
        bGuardar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bGuardar.setBorderPainted(false);
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        bAgregar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bAgregar.setText("AGREGAR");
        bAgregar.setToolTipText("");
        bAgregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bAgregar.setBorderPainted(false);
        bAgregar.setPreferredSize(new java.awt.Dimension(95, 37));
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bAmbulancia.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bAmbulancia.setText("AMBULANCIA");
        bAmbulancia.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bAmbulancia.setBorderPainted(false);
        bAmbulancia.setEnabled(false);
        bAmbulancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAmbulanciaActionPerformed(evt);
            }
        });

        bSanPablo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bSanPablo.setText("SAN PABLO");
        bSanPablo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bSanPablo.setBorderPainted(false);
        bSanPablo.setEnabled(false);
        bSanPablo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSanPabloActionPerformed(evt);
            }
        });

        bLimpiar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bLimpiar.setText("LIMPIAR");
        bLimpiar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bLimpiar.setBorderPainted(false);
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        lYaexiste.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lYaexiste.setForeground(new java.awt.Color(255, 0, 0));
        lYaexiste.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lYaexiste.setText(" ");

        sAuto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        sAuto.setMaximum(10);
        sAuto.setMinimum(1);
        sAuto.setOrientation(javax.swing.JSlider.VERTICAL);
        sAuto.setValue(1);
        sAuto.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sAuto.setInverted(true);

        jLabel11.setBackground(new java.awt.Color(253, 183, 0));
        jLabel11.setForeground(new java.awt.Color(253, 183, 0));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminboletos/PiPo.png"))); // NOI18N

        bPension.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bPension.setText("PENSION");
        bPension.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 4, true));
        bPension.setBorderPainted(false);
        bPension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPensionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bPerdido, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(bPension, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lYaexiste, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tCodigo)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(28, 28, 28)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(tHorasal, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(tHoraent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tEntrada, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(27, 27, 27)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(rManual)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel10)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(tImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(bLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(24, 24, 24)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(tFecha)
                                            .addComponent(tEstancia)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(bAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(33, 33, 33)
                        .addComponent(sAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bComex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bSello, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bBanorte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bStarbucks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bCinemex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bCortesia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bAmbulancia, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                .addComponent(bSanPablo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jSeparator1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bSello, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bSanPablo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bComex, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bStarbucks, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bCinemex, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bCortesia, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bBanorte, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(bAmbulancia, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(sAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bPension, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bPerdido, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(493, 493, 493)
                                        .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lYaexiste)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel2)
                                                    .addComponent(jLabel3)
                                                    .addComponent(jLabel6))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(tBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tHoraent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(tHorasal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tEstancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel7)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(tImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel10)))
                                                    .addComponent(rManual)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(bAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(52, 52, 52)
                                        .addComponent(bLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(105, 105, 105)))
                                .addGap(23, 23, 23)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSelloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelloActionPerformed
        // TODO add your handling code here:
        tarifa = "SELLO";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        Sello();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                Sello();
            }
        }
    }//GEN-LAST:event_bSelloActionPerformed

    private void tCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCodigoActionPerformed
        // TODO add your handling code here:
        if (rManual.isSelected()) {
            tHorasal.requestFocusInWindow();
        }
        if (BoletoExiste()) {
            //13293490812220847
            lYaexiste.setText("***BOLETO YA AGREGADO***");
            notificacion.beep();
            tCodigo.setText("");
            tCodigo.requestFocusInWindow();
        } else {
            lYaexiste.setText(" ");
        }
    }//GEN-LAST:event_tCodigoActionPerformed

    private void rManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rManualActionPerformed
        // TODO add your handling code here:
        tCodigo.requestFocusInWindow();
        if (tHorasal.isEditable()) {
            tHorasal.setEditable(false);
        } else {
            tHorasal.setEditable(true);
        }
        if (sAuto.isEnabled()) {
            sAuto.setEnabled(false);
        } else {
            sAuto.setEnabled(true);
        }
        if (bGeneral.isEnabled()) {
            bGeneral.setEnabled(false);
        } else {
            bGeneral.setEnabled(true);
        }
        if (bSello.isEnabled()) {
            bSello.setEnabled(false);
        } else {
            bSello.setEnabled(true);
        }
        if (bSanPablo.isEnabled()) {
            bSanPablo.setEnabled(false);
        } else {
            bSanPablo.setEnabled(true);
        }
        if (bComex.isEnabled()) {
            bComex.setEnabled(false);
        } else {
            bComex.setEnabled(true);
        }
        if (bStarbucks.isEnabled()) {
            bStarbucks.setEnabled(false);
        } else {
            bStarbucks.setEnabled(true);
        }
        if (bCinemex.isEnabled()) {
            bCinemex.setEnabled(false);
        } else {
            bCinemex.setEnabled(true);
        }
        if (bCortesia.isEnabled()) {
            bCortesia.setEnabled(false);
        } else {
            bCortesia.setEnabled(true);
        }
        if (bProveedor.isEnabled()) {
            bProveedor.setEnabled(false);
        } else {
            bProveedor.setEnabled(true);
        }
        if (bBanorte.isEnabled()) {
            bBanorte.setEnabled(false);
        } else {
            bBanorte.setEnabled(true);
        }
        if (bAmbulancia.isEnabled()) {
            bAmbulancia.setEnabled(false);
        } else {
            bAmbulancia.setEnabled(true);
        }
    }//GEN-LAST:event_rManualActionPerformed

    private void bGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGeneralActionPerformed
        // TODO add your handling code here:
        tarifa = "GENERAL";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        General();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                General();
            }
        }
    }//GEN-LAST:event_bGeneralActionPerformed

    private void bComexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bComexActionPerformed
        // TODO add your handling code here:
        tarifa = "COMEX";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        Comex();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                Comex();
            }
        }
    }//GEN-LAST:event_bComexActionPerformed

    private void bStarbucksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStarbucksActionPerformed
        // TODO add your handling code here:
        tarifa = "STARBUCKS";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        Starbucks();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                Starbucks();
            }
        }
    }//GEN-LAST:event_bStarbucksActionPerformed

    private void bCinemexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCinemexActionPerformed
        // TODO add your handling code here:
        tarifa = "CINEMEX";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        Cinemex();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                Cinemex();
            }
        }
    }//GEN-LAST:event_bCinemexActionPerformed

    private void bCortesiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCortesiaActionPerformed
        // TODO add your handling code here:
        tarifa = "CORTESIA";
        System.out.println(tarifa);
        //PREGUNTAR SI EL SISTEMA DESPLIEGA TODA LA INFORMACION O SOLO EL IMPORTE?
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        tImporte.setText("0");
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tEstancia.setText("0" + nhora + ":0" + nminutos);
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                } else {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                tImporte.setText("0");
            }
        }
    }//GEN-LAST:event_bCortesiaActionPerformed

    private void bProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProveedorActionPerformed
        // TODO add your handling code here:
        tarifa = "PROVEEDOR";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        Proveedor();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                Proveedor();
            }
        }
    }//GEN-LAST:event_bProveedorActionPerformed

    private void bBanorteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBanorteActionPerformed
        // TODO add your handling code here:
        tarifa = "BANORTE";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        Banorte();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                Banorte();
            }
        }
    }//GEN-LAST:event_bBanorteActionPerformed

    private void bPerdidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPerdidoActionPerformed
        // TODO add your handling code here:
        //PREGUNTAR SI SE DEBE GUARDAR EL DIA EN QUE SE PERDIO EL BOLETO?
        //PREGUNTAR SI EN CORTESIA EL SISTEMA DESPLIEGA TODA LA INFORMACION O SOLO EL IMPORTE?
        tarifa = "PERDIDO";
        tCodigo.setText("00000000000000000");//17
        tEntrada.setText("0");
        tBoleto.setText("000000");
        tHoraent.setText("00:00");
        tHorasal.setText("00:00");
        tEstancia.setText("00:00");
        tImporte.setText("200");
        tFecha.setEditable(true);
        tFecha.setText("" + LocalDate.now().toString().replace("-", "/").subSequence(2, 10));
        //System.out.println(tFecha.getText().subSequence(6, 8) + "/" + tFecha.getText().subSequence(3, 5) + "/" + tFecha.getText().subSequence(0, 2));
        tFecha.requestFocusInWindow();
    }//GEN-LAST:event_bPerdidoActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        // TODO add your handling code here:
        AgregarSuma();

        XSSFWorkbook archivo = null;
        try {
            archivo = new XSSFWorkbook("Encabezados.xlsx");
        } catch (IOException ex) {
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        }
        XSSFSheet hoja = archivo.getSheet("BASE DE DATOS");

        //AJUSTAR TAMAÑO DE COLUMNAS
        for (int i = 0; i < 8; i++) {
            hoja.autoSizeColumn(i);
        }

        JFileChooser administradordeArchivos = new JFileChooser();
        administradordeArchivos.setDialogTitle("Guardar Archivo");
        administradordeArchivos.setSelectedFile(new File(LocalDate.now().toString().trim() + ".xlsx"));

        if (administradordeArchivos.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File output = administradordeArchivos.getSelectedFile();
            try (FileOutputStream guardar = new FileOutputStream(output)) {
                archivo.write(guardar);
                guardar.close();
                System.out.println("EXCEL CREADO CORRECTAMENTE");
            } catch (FileNotFoundException ex) {
                ErrorArchivo404();
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_bGuardarActionPerformed

    public void Suma(String tarifa) {
        e1=0;
        e2=0;
        try {
            tabla.clear();
        } catch (Exception e) {
            System.out.println("Primera entrada a Boletaje");
        }
        Set<Integer> num = new HashSet<Integer>();
        try {
            FileInputStream file = new FileInputStream("Encabezados.xlsx");
            XSSFWorkbook archivo = new XSSFWorkbook(file);

            XSSFSheet hoja = archivo.getSheet("BASE DE DATOS");
            //System.out.println(hoja.getLastRowNum());
            XSSFRow fila;
            Cell celdatarifa = null, celdaimporte = null,celdafecha = null, celdaentrada = null, celdaboleto = null;
            DataFormatter formato = new DataFormatter();
            String valor;
            if (hoja.getLastRowNum() > 0) {
                for (int i = 1; i <= hoja.getLastRowNum(); i++) {
                    fila = hoja.getRow(i);
                    celdaboleto = fila.getCell(1);
                    celdafecha = fila.getCell(2);
                    celdaentrada = fila.getCell(0);
                    celdatarifa = fila.getCell(7);
                    celdaimporte = fila.getCell(6);
                    fechatxt = celdafecha.getStringCellValue();
                    if(i==1){
                        e1i= celdaboleto.getStringCellValue();
                    }
                    if(i==2){
                        e1f= celdaboleto.getStringCellValue();
                    }
                    if(i==3){
                        e2i= celdaboleto.getStringCellValue();
                    }
                    if(i==4){
                        e2f= celdaboleto.getStringCellValue();
                    }
                    if(celdaentrada.getStringCellValue().equalsIgnoreCase("1")){
                        e1++;
                    }if(celdaentrada.getStringCellValue().equalsIgnoreCase("2")){
                        e2++;
                    }
                    if (celdatarifa.getStringCellValue().equalsIgnoreCase(tarifa)) {

                        valor = formato.formatCellValue(celdaimporte);
                        //System.out.println(valor.toString());
                        num.add(Integer.parseInt(valor.toString()));
                    }
                }
                numimporte = new ArrayList<Integer>(num);
                Collections.sort(numimporte);
                System.out.println(tarifa);
                System.out.println(numimporte);
                for (int i = 0; i < numimporte.size(); i++) {
                    tabla.add(i);
                    tabla.add(i);
                    tabla.add(i);
                }
                //ArrayList<Integer> tabla= new ArrayList<Integer>();
                int nuevoimporte = 0;
                for (int i = 0; i < numimporte.size(); i++) {
                    int cont = 1;
                    for (int j = 1; j <= hoja.getLastRowNum(); j++) {
                        fila = hoja.getRow(j);
                        celdatarifa = fila.getCell(7);
                        celdaimporte = fila.getCell(6);
                        if (celdatarifa.getStringCellValue().equalsIgnoreCase(tarifa)) {
                            valor = formato.formatCellValue(celdaimporte);
                            if (numimporte.get(i) == Integer.parseInt(valor.toString())) {
                                tabla.set(0 + nuevoimporte, cont);
                                tabla.set(1 + nuevoimporte, Integer.parseInt(valor.toString()));
                                tabla.set(2 + nuevoimporte, tabla.get(0 + nuevoimporte) * tabla.get(1 + nuevoimporte));
                                cont++;
                                /*if (i == 0) {
                                    tabla.set(0, cont);
                                    tabla.set(1, Integer.parseInt(celdaimporte.getStringCellValue()));
                                    tabla.set(2, tabla.get(0) * tabla.get(1));
                                    cont++;
                                }
                                if (i > 0) {
                                    tabla.set(0 + nuevoimporte, cont);
                                    tabla.set(1 + nuevoimporte, Integer.parseInt(celdaimporte.getStringCellValue()));
                                    tabla.set(2 + nuevoimporte, tabla.get(0 + nuevoimporte) * tabla.get(1 + nuevoimporte));
                                    cont++;
                                }*/
                            }
                        }
                    }
                    nuevoimporte += 3;
                }
            }
            file.close();
            System.out.println(tabla);
            /*try {
                //GUARDAR ARCHIVO DE EXCEL
                FileOutputStream guardar1 = new FileOutputStream(new File("Encabezados.xlsx"));
                archivo.write(guardar1);
                guardar1.close();
                System.out.println("EXCEL CREADO CORRECTAMENTE");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            }*/
        } catch (FileNotFoundException ex) {
            ErrorArchivo404();
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void AgregarSuma() {
        int nueva = 0, nuevoimporte, boletos = 0, total = 0, boletost = 0, totalt = 0;
        int bgen=0,bsel=0,bsan=0,bcom=0,bsta=0,bcin=0,bcor=0,bpro=0,bban=0,bamb=0,bpen=0,bper=0;
        int igen=0,isel=0,isan=0,icom=0,ista=0,icin=0,icor=0,ipro=0,iban=0,iamb=0,ipen=0,iper=0;
        DataFormatter formato = new DataFormatter();
        String valor;
        try {
            FileInputStream file = new FileInputStream("Encabezados.xlsx");
            XSSFWorkbook archivo = new XSSFWorkbook(file);

            try {
                archivo.removeSheetAt(1);
                archivo.removeSheetAt(1);
            } catch (Exception e) {

            }
            XSSFSheet hoja = archivo.createSheet("BOLETAJE");
            XSSFRow fila = hoja.createRow(nueva);
            //System.out.println("" + nueva);
            //CREAR ESTILO DE CELDA
            CellStyle estilo = archivo.createCellStyle();
            estilo.setAlignment(HorizontalAlignment.CENTER);
            estilo.setVerticalAlignment(VerticalAlignment.CENTER);
            //CREAR ESTILO DE CELDA CON FONDO DE COLOR
            CellStyle estilofondo = archivo.createCellStyle();
            estilofondo.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
            estilofondo.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            //CREAR LA CELDA 0 DEL LA FILA 0
            Cell celda0 = fila.createCell(0);
            Cell celda1 = fila.createCell(1);
            Cell celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            //GENERAL
            celda0.setCellValue("-");
            celda1.setCellValue("GENERAL");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("GENERAL");
            nueva++;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bgen=boletos;
                igen=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("GENERAL EXCEPTION");
            }
            //SELLO
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("SELLO");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("SELLO");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bsel=boletos;
                isel=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("SELLO EXCEPTION");
            }
            //SAN PABLO
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("SAN PABLO");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("SAN PABLO");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bsan=boletos;
                isan=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("SAN PABLO EXCEPTION");
            }
            //COMEX
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("COMEX");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("COMEX");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bcom=boletos;
                icom=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("COMEX EXCEPTION");
            }
            //STARBUCKS
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("STARBUCKS");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("STARBUCKS");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bsta=boletos;
                ista=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("STARBUCKS EXCEPTION");
            }
            //CINEMEX
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("CINEMEX");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("CINEMEX");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bcin=boletos;
                icin=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("CINEMEX EXCEPTION");
            }
            //CORTESIA
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("CORTESIA");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("CORTESIA");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bcor=boletos;
                icor=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("CORTESIA EXCEPTION");
            }
            //PROVEEDOR
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("PROVEEDOR");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("PROVEEDOR");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bpro=boletos;
                ipro=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("PROVEEDOR EXCEPTION");
            }
            //BANORTE
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("BANORTE");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("BANORTE");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bban=boletos;
                iban=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("BANORTE EXCEPTION");
            }
            //AMBULANCIA
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("AMBULANCIA");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("AMBULANCIA");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bamb=boletos;
                iamb=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("AMBULANCIA EXCEPTION");
            }
            //PENSION
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("PENSION");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("PENSION");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bpen=boletos;
                ipen=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("PENSION EXCEPTION");
            }
            //PERDIDO
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("-");
            celda1.setCellValue("PERDIDO");
            celda2.setCellValue("-");
            nueva++;
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("IMPORTE");
            celda2.setCellValue("TOTAL");
            Suma("PERDIDO");
            nueva += 2;
            nuevoimporte = 0;
            try {
                for (int i = 0; i < numimporte.size(); i++) {
                    fila = hoja.createRow(nueva);
                    celda0 = fila.createCell(0);
                    celda1 = fila.createCell(1);
                    celda2 = fila.createCell(2);
                    celda0.setCellStyle(estilo);
                    celda1.setCellStyle(estilo);
                    celda2.setCellStyle(estilo);
                    celda0.setCellValue(tabla.get(nuevoimporte));
                    valor = formato.formatCellValue(celda0);
                    boletos += Integer.parseInt(valor.toString());
                    celda1.setCellValue(tabla.get(nuevoimporte + 1));
                    celda2.setCellValue(tabla.get(nuevoimporte + 2));
                    valor = formato.formatCellValue(celda2);
                    total += Integer.parseInt(valor.toString());
                    nueva++;
                    nuevoimporte += 3;
                }
                fila = hoja.createRow(nueva);
                celda0 = fila.createCell(0);
                celda1 = fila.createCell(1);
                celda2 = fila.createCell(2);
                celda0.setCellStyle(estilofondo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilofondo);
                celda0.setCellValue(boletos);
                celda1.setCellValue("TOTAL $");
                celda2.setCellValue(total);
                bper=boletos;
                iper=total;
                boletost += boletos;
                totalt += total;
                boletos = 0;
                total = 0;
                nueva++;
            } catch (Exception e) {
                System.out.println("PERDIDO EXCEPTION");
            }
            //TOTAL
            fila = hoja.createRow(nueva + 1);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda0.setCellValue("BOLETOS");
            celda1.setCellValue("-");
            celda2.setCellValue("TOTAL");
            fila = hoja.createRow(nueva + 2);
            celda0 = fila.createCell(0);
            celda1 = fila.createCell(1);
            celda2 = fila.createCell(2);
            celda0.setCellStyle(estilofondo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilofondo);
            celda0.setCellValue(boletost);
            celda1.setCellValue("TOTAL $");
            celda2.setCellValue(totalt);

            for (int i = 0; i < 3; i++) {
                hoja.autoSizeColumn(i);
            }
            file.close();
            try {
                //GUARDAR ARCHIVO DE EXCEL
                FileOutputStream guardar1 = new FileOutputStream(new File("Encabezados.xlsx"));
                archivo.write(guardar1);
                guardar1.close();
                System.out.println("AGREGARSUMA()-EXCEL CREADO CORRECTAMENTE");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            ErrorArchivo404();
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        }
        //CREAR NUEVA HOJA
        try {
            FileInputStream file = new FileInputStream("Encabezados.xlsx");
            XSSFWorkbook archivo = new XSSFWorkbook(file);
            
           
            XSSFSheet hoja = archivo.createSheet("VENTA");
            XSSFRow fila = hoja.createRow(0);
            //CREAR ESTILO DE CELDA
            CellStyle estilo = archivo.createCellStyle();
            estilo.setAlignment(HorizontalAlignment.CENTER);
            estilo.setVerticalAlignment(VerticalAlignment.CENTER);
            //FILA ENCABEZADOS
            Cell celdas[] = new Cell[29];
            for (int i = 0; i < celdas.length; i++) {
                celdas[i]=fila.createCell(i);
                celdas[i].setCellStyle(estilo);
            }
            celdas[0].setCellValue("FECHA");
            celdas[1].setCellValue("BOLETO\nINICIAL E1");
            celdas[2].setCellValue("BOLETO\nFINAL E1");
            celdas[3].setCellValue("TOTAL\nBOLETOS\nEMITIDOS\nE1");
            celdas[4].setCellValue("BOLETO\nINICIAL E2");
            celdas[5].setCellValue("BOLETO\nFINAL E2");
            celdas[6].setCellValue("TOTAL\nBOLETOS\nEMITIDOS\nE2");
            celdas[7].setCellValue("BOLETOS\nGENERAL");
            celdas[8].setCellValue("IMPORTE\nGENERAL");
            celdas[9].setCellValue("BOLETOS\nSELLO");
            celdas[10].setCellValue("IMPORTE\nSELLO");
            celdas[11].setCellValue("BOLETOS\nSAN PABLO");
            celdas[12].setCellValue("IMPORTE\nSAN PABLO");
            celdas[13].setCellValue("BOLETOS\nBANORTE");
            celdas[14].setCellValue("IMPORTE\nBANORTE");
            celdas[15].setCellValue("BOLETOS\nSTARBUCKS");
            celdas[16].setCellValue("IMPORTE\nSTARBUCKS");
            celdas[17].setCellValue("BOLETOS\nCOMEX");
            celdas[18].setCellValue("IMPORTE\nCOMEX");
            celdas[19].setCellValue("BOLETOS\nPROVEEDOR");
            celdas[20].setCellValue("IMPORTE\nPROVEEDOR");
            celdas[21].setCellValue("BOLETOS\nCORTESIA");
            celdas[22].setCellValue("BOLETOS\nAMBULANCIA");
            celdas[23].setCellValue("BOLETOS\nPERDIDOS");
            celdas[24].setCellValue("IMPORTE\nPERDIDOS");
            celdas[25].setCellValue("PENSIONES");
            celdas[26].setCellValue("IMPORTE\nPENSIONES");
            celdas[27].setCellValue("TOTAL\nBOLETOS");
            celdas[28].setCellValue("TOTAL\nIMPORTE");
            
            for (int i = 0; i < 29; i++) {//29? 36
                hoja.autoSizeColumn(i);
            }
            //FILA DATOS
            fila = hoja.createRow(1);
            for (int i = 0; i < celdas.length; i++) {
                celdas[i]=fila.createCell(i);
                celdas[i].setCellStyle(estilo);
            }
            celdas[0].setCellValue(fechatxt);
            celdas[1].setCellValue(e1i);
            celdas[2].setCellValue(e1f);
            celdas[3].setCellValue(e1);
            celdas[4].setCellValue(e2i);
            celdas[5].setCellValue(e2f);
            celdas[6].setCellValue(e2);
            celdas[7].setCellValue(bgen);
            celdas[8].setCellValue(igen);
            celdas[9].setCellValue(bsel);
            celdas[10].setCellValue(isel);
            celdas[11].setCellValue(bsan);
            celdas[12].setCellValue(isan);
            celdas[13].setCellValue(bban);
            celdas[14].setCellValue(iban);
            celdas[15].setCellValue(bsta);
            celdas[16].setCellValue(ista);
            celdas[17].setCellValue(bcom);
            celdas[18].setCellValue(icom);
            celdas[19].setCellValue(bpro);
            celdas[20].setCellValue(ipro);
            celdas[21].setCellValue(bcor);
            celdas[22].setCellValue(bamb);
            celdas[23].setCellValue(bper);
            celdas[24].setCellValue(iper);
            celdas[25].setCellValue(bpen);
            celdas[26].setCellValue(ipen);
            celdas[27].setCellValue(boletost);
            celdas[28].setCellValue(totalt);
            
            for (int i = 0; i < 29; i++) {//29? 36
                hoja.autoSizeColumn(i);
            }
            //CREAR LA CELDA 0 DEL LA FILA 0
            /*Cell celda0 = fila.createCell(0);
            Cell celda1 = fila.createCell(1);
            Cell celda2 = fila.createCell(2);
            Cell celda3 = fila.createCell(3);
            Cell celda4 = fila.createCell(4);
            Cell celda5 = fila.createCell(5);
            Cell celda6 = fila.createCell(6);
            Cell celda7 = fila.createCell(7);
            Cell celda8 = fila.createCell(8);
            Cell celda9 = fila.createCell(9);
            Cell celda10 = fila.createCell(10);
            Cell celda11 = fila.createCell(11);
            Cell celda12 = fila.createCell(12);
            Cell celda13 = fila.createCell(13);
            Cell celda14 = fila.createCell(14);
            Cell celda15 = fila.createCell(15);
            Cell celda16 = fila.createCell(16);
            Cell celda17 = fila.createCell(17);
            Cell celda18 = fila.createCell(18);
            Cell celda19 = fila.createCell(19);
            Cell celda20 = fila.createCell(20);
            Cell celda21 = fila.createCell(21);
            Cell celda22 = fila.createCell(22);
            Cell celda23 = fila.createCell(23);
            Cell celda24 = fila.createCell(24);
            Cell celda25 = fila.createCell(25);
            Cell celda26 = fila.createCell(26);
            Cell celda27 = fila.createCell(27);
            Cell celda28 = fila.createCell(28);
            Cell celda29 = fila.createCell(29);
            Cell celda30 = fila.createCell(30);
            Cell celda31 = fila.createCell(31);
            Cell celda32 = fila.createCell(32);
            Cell celda33 = fila.createCell(33);
            Cell celda34 = fila.createCell(34);
            Cell celda35 = fila.createCell(35);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda3.setCellStyle(estilo);
            celda4.setCellStyle(estilo);
            celda5.setCellStyle(estilo);
            celda6.setCellStyle(estilo);
            celda7.setCellStyle(estilo);
            celda8.setCellStyle(estilo);
            celda9.setCellStyle(estilo);
            celda10.setCellStyle(estilo);
            celda11.setCellStyle(estilo);
            celda12.setCellStyle(estilo);
            celda13.setCellStyle(estilo);
            celda14.setCellStyle(estilo);
            celda15.setCellStyle(estilo);
            celda16.setCellStyle(estilo);
            celda17.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda3.setCellStyle(estilo);
            celda4.setCellStyle(estilo);
            celda5.setCellStyle(estilo);
            celda6.setCellStyle(estilo);
            celda7.setCellStyle(estilo);
            celda0.setCellStyle(estilo);
            celda1.setCellStyle(estilo);
            celda2.setCellStyle(estilo);
            celda3.setCellStyle(estilo);
            celda4.setCellStyle(estilo);
            celda5.setCellStyle(estilo);
            celda6.setCellStyle(estilo);
            celda7.setCellStyle(estilo);*/
            //COLOCAR LOS VALORES EN ORDEN
            /*celdas[0].setCellValue(tEntrada.getText());
            celdas[1].setCellValue(tBoleto.getText());
            if (tFecha.isEditable()) {
                celdas[2].setCellValue(tFecha.getText().subSequence(6, 8) + "/" + tFecha.getText().subSequence(3, 5) + "/" + tFecha.getText().subSequence(0, 2));
            } else {
                celdas[2].setCellValue(tFecha.getText());
            }

            celdas[3].setCellValue(tHoraent.getText());
            if (tHorasal.isEditable()) {
                celdas[4].setCellValue(tHorasal.getText().subSequence(0, 2) + ":" + tHorasal.getText().subSequence(2, 4));
            } else {
                celdas[4].setCellValue(tHorasal.getText());
            }
            celdas[5].setCellValue(tEstancia.getText());
            celdas[6].setCellValue(tImporte.getText());
            celdas[7].setCellValue(tarifa);*/
            file.close();
            try {
                //GUARDAR ARCHIVO DE EXCEL
                FileOutputStream guardar1 = new FileOutputStream(new File("Encabezados.xlsx"));
                archivo.write(guardar1);
                guardar1.close();
                System.out.println("HOJA VENTA EXCEL CREADO CORRECTAMENTE");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            ErrorArchivo404();
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        // TODO add your handling code here:
        if (tCodigo.getText().length() == 17 && !tImporte.getText().isEmpty() && !tImporte.getText().equalsIgnoreCase("error") && Integer.parseInt(tImporte.getText()) >= 0) {
            try {
                FileInputStream file = new FileInputStream("Encabezados.xlsx");
                XSSFWorkbook archivo = new XSSFWorkbook(file);

                XSSFSheet hoja = archivo.getSheet("BASE DE DATOS");
                XSSFRow fila = hoja.createRow(hoja.getLastRowNum()+1);
                //System.out.println("" + nueva);
                //CREAR ESTILO DE CELDA
                CellStyle estilo = archivo.createCellStyle();
                estilo.setAlignment(HorizontalAlignment.CENTER);
                estilo.setVerticalAlignment(VerticalAlignment.CENTER);
                //CREAR LA CELDA 0 DEL LA FILA 0
                Cell celda0 = fila.createCell(0);
                Cell celda1 = fila.createCell(1);
                Cell celda2 = fila.createCell(2);
                Cell celda3 = fila.createCell(3);
                Cell celda4 = fila.createCell(4);
                Cell celda5 = fila.createCell(5);
                Cell celda6 = fila.createCell(6);
                Cell celda7 = fila.createCell(7);
                celda0.setCellStyle(estilo);
                celda1.setCellStyle(estilo);
                celda2.setCellStyle(estilo);
                celda3.setCellStyle(estilo);
                celda4.setCellStyle(estilo);
                celda5.setCellStyle(estilo);
                celda6.setCellStyle(estilo);
                celda7.setCellStyle(estilo);
                //COLOCAR LOS VALORES EN ORDEN
                celda0.setCellValue(tEntrada.getText());
                /*if(Integer.parseInt(tEntrada.getText())==1){
                    e1++;
                }
                if(Integer.parseInt(tEntrada.getText())==2){
                    e2++;
                }*/
                celda1.setCellValue(tBoleto.getText());
                if (tFecha.isEditable()) {
                    celda2.setCellValue(tFecha.getText().subSequence(6, 8) + "/" + tFecha.getText().subSequence(3, 5) + "/" + tFecha.getText().subSequence(0, 2));
                } else {
                    celda2.setCellValue(tFecha.getText());
                    //fechatxt=tFecha.getText();
                }

                celda3.setCellValue(tHoraent.getText());
                if (tHorasal.isEditable()) {
                    celda4.setCellValue(tHorasal.getText().subSequence(0, 2) + ":" + tHorasal.getText().subSequence(2, 4));
                } else {
                    celda4.setCellValue(tHorasal.getText());
                }
                celda5.setCellValue(tEstancia.getText());
                celda6.setCellValue(tImporte.getText());
                celda7.setCellValue(tarifa);
                file.close();
                try {
                    //GUARDAR ARCHIVO DE EXCEL
                    FileOutputStream guardar1 = new FileOutputStream(new File("Encabezados.xlsx"));
                    archivo.write(guardar1);
                    guardar1.close();
                    System.out.println("EXCEL CREADO CORRECTAMENTE");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
                }
                Vaciado();
                tCodigo.requestFocusInWindow();
                //nueva++;
                /*mensaje.setText("AGREGADO CON EXITO");
                mensaje.setForeground(Color.black);
                popup.setVisible(true);*/
            } catch (FileNotFoundException ex) {
                ErrorArchivo404();
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bAmbulanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAmbulanciaActionPerformed
        // TODO add your handling code here:
        tarifa = "AMBULANCIA";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        tImporte.setText("0");
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tEstancia.setText("0" + nhora + ":0" + nminutos);
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                } else {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                tImporte.setText("0");
            }
        }
    }//GEN-LAST:event_bAmbulanciaActionPerformed

    private void bSanPabloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSanPabloActionPerformed
        // TODO add your handling code here:
        tarifa = "SAN PABLO";
        System.out.println(tarifa);
        if (!tCodigo.getText().equals("")) {
            if (rManual.isSelected()) {
                if (tHorasal.getText().length() != 4) {
                    tImporte.setText("ERROR");
                    Error0000();
                } else {
                    Codigo();

                    horaf = Integer.parseInt(tHorasal.getText().substring(0, 2));
                    minutosf = Integer.parseInt(tHorasal.getText().substring(2, 4));
                    System.out.println(horaf + ":" + minutosf);

                    Estancia();
                    if (nhora < 0) {
                        tImporte.setText("ERROR");
                        ErrorHorasalMenor();
                    } else {
                        Sello();
                    }
                }
            } else {
                Codigo();

                horaf = Integer.parseInt(LocalTime.now().toString().substring(0, 3).replace(":", " ").trim());
                minutosf = Integer.parseInt(LocalTime.now().toString().substring(3, 5).replace(":", " ").trim());
                System.out.println("HORA SALIDA: " + horaf + ":" + minutosf);

                if (horaf < 10 && minutosf > 9) {
                    tHorasal.setText("0" + horaf + ":" + minutosf);
                }
                if (minutosf < 10 && horaf > 9) {
                    tHorasal.setText(horaf + ":0" + minutosf);
                }
                if (horaf < 10 && minutosf < 10) {
                    tHorasal.setText("0" + horaf + ":0" + minutosf);
                }
                if (horaf > 9 && minutosf > 9) {
                    tHorasal.setText(horaf + ":" + minutosf);
                }

                Estancia();
                Sello();
            }
        }
    }//GEN-LAST:event_bSanPabloActionPerformed

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        // TODO add your handling code here:
        Vaciado();
        tCodigo.requestFocusInWindow();
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void tHorasalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tHorasalActionPerformed
        // TODO add your handling code here:
        if (sAuto.getValue() == 1) {
            //bGeneral.doClick();
            bGeneralActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 2) {
            //bSello.doClick();
            bSelloActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 3) {
            //bSanPablo.doClick();
            bSanPabloActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 4) {
            //bComex.doClick();
            bComexActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 5) {
            //bStarbucks.doClick();
            bStarbucksActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 6) {
            //bCinemex.doClick();
            bCinemexActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 7) {
            //bCortesia.doClick();
            bCortesiaActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 8) {
            //bProveedor.doClick();
            bProveedorActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 9) {
            //bBanorte.doClick();
            bBanorteActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
        if (sAuto.getValue() == 10) {
            //bAmbulancia.doClick();
            bAmbulanciaActionPerformed(new ActionEvent(Event.ACTION_EVENT, 0, " "));
        }
    }//GEN-LAST:event_tHorasalActionPerformed

    private void bPensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPensionActionPerformed
        // TODO add your handling code here:
        tarifa = "PENSION";
        tCodigo.setText("00000000000000000");//17
        tEntrada.setText("0");
        tBoleto.setText("000000");
        tHoraent.setText("00:00");
        tHorasal.setText("00:00");
        tEstancia.setText("00:00");
        tFecha.setEditable(true);
        tImporte.setEditable(true);
        tFecha.setText("" + LocalDate.now().toString().replace("-", "/").subSequence(2, 10));
        //System.out.println(tFecha.getText().subSequence(6, 8) + "/" + tFecha.getText().subSequence(3, 5) + "/" + tFecha.getText().subSequence(0, 2));
        tFecha.requestFocusInWindow();
    }//GEN-LAST:event_bPensionActionPerformed

    private void tFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tFechaActionPerformed
        // TODO add your handling code here:
        tImporte.requestFocusInWindow();
    }//GEN-LAST:event_tFechaActionPerformed

    public void CrearExcel() {
        //CREAR ARCHIVO EXCEL
        XSSFWorkbook archivo = new XSSFWorkbook();
        //CREAR HOJA EN EL ARCHIVO EXCEL
        XSSFSheet hoja = archivo.createSheet("BASE DE DATOS");
        //CREAR LA FILA 0 DEL ARCHIVO EXCEL
        XSSFRow fila = hoja.createRow(0);
        //CREAR ESTILO DE CELDA
        CellStyle estilo = archivo.createCellStyle();
        estilo.setAlignment(HorizontalAlignment.CENTER);
        estilo.setVerticalAlignment(VerticalAlignment.CENTER);
        //CREAR LA CELDA 0 DEL LA FILA 0
        Cell celda0 = fila.createCell(0);
        Cell celda1 = fila.createCell(1);
        Cell celda2 = fila.createCell(2);
        Cell celda3 = fila.createCell(3);
        Cell celda4 = fila.createCell(4);
        Cell celda5 = fila.createCell(5);
        Cell celda6 = fila.createCell(6);
        Cell celda7 = fila.createCell(7);
        celda0.setCellStyle(estilo);
        celda1.setCellStyle(estilo);
        celda2.setCellStyle(estilo);
        celda3.setCellStyle(estilo);
        celda4.setCellStyle(estilo);
        celda5.setCellStyle(estilo);
        celda6.setCellStyle(estilo);
        celda7.setCellStyle(estilo);
        //COLOCAR EL VALOR "BOLETO" EN LA CELDA 0
        celda0.setCellValue("EXPEDIDORA");
        celda1.setCellValue("BOLETO");
        celda2.setCellValue("FECHA");
        celda3.setCellValue("HORA ENTRADA");
        celda4.setCellValue("HORA SALIDA");
        celda5.setCellValue("ESTANCIA");
        celda6.setCellValue("IMPORTE PAGADO");
        celda7.setCellValue("TARIFA");
        //System.out.println(hoja.getLastRowNum());
        try {
            //GUARDAR ARCHIVO DE EXCEL
            FileOutputStream guardar1 = new FileOutputStream(new File("Encabezados.xlsx"));
            archivo.write(guardar1);
            guardar1.close();
            System.out.println("EXCEL CREADO CORRECTAMENTE");
        } catch (FileNotFoundException ex) {
            ErrorArchivo404();
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public boolean BoletoExiste() {
        if (tCodigo.getText().length() == 17) {
            try {
                FileInputStream file = new FileInputStream("Encabezados.xlsx");
                XSSFWorkbook archivo = new XSSFWorkbook(file);

                XSSFSheet hoja = archivo.getSheet("BASE DE DATOS");
                XSSFRow fila;
                Cell celda = null;

                if (hoja.getLastRowNum() > 0) {
                    for (int i = 1; i <= hoja.getLastRowNum(); i++) {
                        fila = hoja.getRow(i);
                        celda = fila.getCell(1);
                        //System.out.println("Fila-"+i+" Boleto-"+celda.getStringCellValue());
                        if (celda.getStringCellValue().equalsIgnoreCase(tCodigo.getText().substring(1, 7))) {
                            return true;
                        }
                    }
                }
                file.close();
                try {
                    //GUARDAR ARCHIVO DE EXCEL
                    FileOutputStream guardar1 = new FileOutputStream(new File("Encabezados.xlsx"));
                    archivo.write(guardar1);
                    guardar1.close();
                    System.out.println("EXCEL CREADO CORRECTAMENTE");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                ErrorArchivo404();
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    public void Codigo() {
        //System.out.println("Codigo " + tCodigo.getText().length());
        if (tCodigo.getText().length() != 17) {
            ErrorCodigo();
        } else {
            popup.setVisible(false);
            entrada = Integer.parseInt(tCodigo.getText().substring(0, 1));
            tEntrada.setText("" + entrada);
            boleto = Integer.parseInt(tCodigo.getText().substring(1, 7));
            tBoleto.setText("" + boleto);
            fecha = Integer.parseInt(tCodigo.getText().substring(7, 13));
            tFecha.setText(tCodigo.getText().substring(7, 9) + "/" + tCodigo.getText().substring(9, 11) + "/" + tCodigo.getText().substring(11, 13));
            horai = Integer.parseInt(tCodigo.getText().substring(13, 15));
            minutosi = Integer.parseInt(tCodigo.getText().substring(15, 17));
            tHoraent.setText(tCodigo.getText().substring(13, 15) + ":" + tCodigo.getText().substring(15, 17));
            //System.out.println("ENTRADA: " + entrada + "\nBOLETO:" + boleto + "\nFECHA:" + fecha + "\nHORA ENTRADA:" + horai + ":" + minutosi);
        }
    }

    public void Estancia() {
        //CALCULO DE HORAS EN ESTACIONAMIENTO
        if (minutosf >= 0 && minutosf < 61 && horaf >= 0 && horaf < 25) {
            if(horai >= 20){
                if(horaf < horai){
                    horaf+=24;
                }
            }
                
            if (minutosf < minutosi) {
                nminutos = (minutosf + 60) - minutosi;
                horaf -= 1;
            } else {
                nminutos = minutosf - minutosi;
            }
            nhora = horaf - horai;
            //System.out.println("HORAS ESTANCIA:" + nhora + ":" + nminutos);
            if (nhora < 10) {
                tEstancia.setText("0" + nhora + ":" + nminutos);
            }
            if (nminutos < 10) {
                tEstancia.setText(nhora + ":0" + nminutos);
            }
            if (nhora < 10 && nminutos < 10) {
                tEstancia.setText("0" + nhora + ":0" + nminutos);
            }
            if (nhora > 9 && nminutos > 9) {
                tEstancia.setText(nhora + ":" + nminutos);
            }
        } else {
            ErrorHorasalRango();
        }
    }

    public void General() {
        //CALCULO DE IMPORTE
        precio = 0;
        if (nminutos > 10 && nhora == 0) {
            precio = 12;
        }
        if (nhora > 0) {
            precio = nhora * 12;
            if (nminutos > 0 && nminutos <= 15) {
                precio += 3;
            }
            if (nminutos > 15 && nminutos <= 30) {
                precio += 6;
            }
            if (nminutos > 30 && nminutos <= 45) {
                precio += 9;
            }
            if (nminutos > 45 && nminutos <= 60) {
                precio += 12;
            }
        }
        //System.out.println("PRECIO A PAGAR: $" + precio);
        tImporte.setText("" + precio);
    }

    public void Sello() {
        //CALCULO DE IMPORTE
        precio = 0;
        if (nminutos > 10 && nhora == 0) {
            precio = 6;
        }
        if (nhora > 0) {
            precio = 6;
        }
        if (nhora > 1) {
            precio = ((nhora - 1) * 6 + 6 * (nhora - 2));
            if (nminutos > 0 && nminutos <= 15) {
                precio += 3;
            }
            if (nminutos > 15 && nminutos <= 30) {
                precio += 6;
            }
            if (nminutos > 30 && nminutos <= 45) {
                precio += 9;
            }
            if (nminutos > 45 && nminutos <= 60) {
                precio += 12;
            }
        }
        //System.out.println("PRECIO A PAGAR: $" + precio);
        tImporte.setText("" + precio);
    }

    public void Cinemex() {
        //CALCULO DE IMPORTE
        precio = 0;
        if (nminutos > 10 && nhora == 0) {
            precio = 6;
        }
        if (nhora > 0) {
            precio = 6;
        }
        if (nhora > 2) {
            precio = ((nhora - 2) * 6 + 6 * (nhora - 3));
            if (nminutos > 0 && nminutos <= 15) {
                precio += 3;
            }
            if (nminutos > 15 && nminutos <= 30) {
                precio += 6;
            }
            if (nminutos > 30 && nminutos <= 45) {
                precio += 9;
            }
            if (nminutos > 45 && nminutos <= 60) {
                precio += 12;
            }
        }
        //System.out.println("PRECIO A PAGAR: $" + precio);
        tImporte.setText("" + precio);
    }

    public void Starbucks() {
        //CALCULO DE IMPORTE
        precio = 0;
        if (nhora == 3) {
            precio = 12;
        }
        if (nhora > 3) {
            precio = (12 * (nhora - 3));
            if (nminutos > 0 && nminutos <= 15) {
                precio += 3;
            }
            if (nminutos > 15 && nminutos <= 30) {
                precio += 6;
            }
            if (nminutos > 30 && nminutos <= 45) {
                precio += 9;
            }
            if (nminutos > 45 && nminutos <= 60) {
                precio += 12;
            }
        }
        //System.out.println("PRECIO A PAGAR: $" + precio);
        tImporte.setText("" + precio);
    }

    public void Banorte() {
        //CALCULO DE IMPORTE
        precio = 0;
        if (nhora > 0 && nhora < 3) {
            precio = 6;
        }
        if (nhora > 2) {
            precio = ((nhora - 2) * 6 + 6 * (nhora - 3));
            if (nminutos > 0 && nminutos <= 15) {
                precio += 3;
            }
            if (nminutos > 15 && nminutos <= 30) {
                precio += 6;
            }
            if (nminutos > 30 && nminutos <= 45) {
                precio += 9;
            }
            if (nminutos > 45 && nminutos <= 60) {
                precio += 12;
            }
        }
        //System.out.println("PRECIO A PAGAR: $" + precio);
        tImporte.setText("" + precio);
    }

    public void Proveedor() {
        //CALCULO DE IMPORTE
        precio = 0;
        if (nhora > 0) {
            precio = 6;
        }
        if (nhora > 1) {
            precio = ((nhora - 1) * 6 + 6 * (nhora - 2));
            if (nminutos > 0 && nminutos <= 15) {
                precio += 3;
            }
            if (nminutos > 15 && nminutos <= 30) {
                precio += 6;
            }
            if (nminutos > 30 && nminutos <= 45) {
                precio += 9;
            }
            if (nminutos > 45 && nminutos <= 60) {
                precio += 12;
            }
            //precio*=nhora;
        }
        //System.out.println("PRECIO A PAGAR: $" + precio);
        tImporte.setText("" + precio);
    }

    public void Comex() {
        //CALCULO DE IMPORTE
        precio = 0;
        if (nhora > 0) {
            precio = 12;
        }
        if (nhora > 1) {
            precio = (nhora - 1) * 12;
            if (nminutos > 0 && nminutos <= 15) {
                precio += 3;
            }
            if (nminutos > 15 && nminutos <= 30) {
                precio += 6;
            }
            if (nminutos > 30 && nminutos <= 45) {
                precio += 9;
            }
            if (nminutos > 45 && nminutos <= 60) {
                precio += 12;
            }
        }
        //System.out.println("PRECIO A PAGAR: $" + precio);
        tImporte.setText("" + precio);
    }

    public void Error0000() {
        mensaje.setText("ERROR: FORMATO 0000 DE 24HRS");
        mensaje.setForeground(Color.black);
        popup.setVisible(true);
    }

    public void ErrorHorasalMenor() {
        mensaje.setText("ERROR: HORA SAL. ES MENOR A HORA ENT.");
        mensaje.setForeground(Color.black);
        popup.setVisible(true);
    }

    public void ErrorArchivo404() {
        mensaje.setText("ERROR: ARCHIVO ESTA EN USO O NO SE ENCONTRO");
        mensaje.setForeground(Color.black);
        popup.setVisible(true);
    }

    public void ErrorHorasalRango() {
        mensaje.setText("ERROR: HORA DE SALIDA CON HORA O MINUTOS INCORRECTOS");
        mensaje.setForeground(Color.black);
        popup.setVisible(true);
    }

    public void ErrorCodigo() {
        mensaje.setText("ERROR: CODIGO DE BOLETO INCORRECTO");
        mensaje.setForeground(Color.black);
        popup.setVisible(true);
    }

    public void Vaciado() {
        tCodigo.setText("");
        tEntrada.setText("");
        tBoleto.setText("");
        tFecha.setText("");
        tFecha.setEditable(false);
        tHoraent.setText("");
        tHorasal.setText("");
        tEstancia.setText("");
        tImporte.setText("");
        tImporte.setEditable(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BOLETOAMARILLO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BOLETOAMARILLO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BOLETOAMARILLO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BOLETOAMARILLO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new BOLETOAMARILLO().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(BOLETOAMARILLO.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bAmbulancia;
    private javax.swing.JButton bBanorte;
    private javax.swing.JButton bCinemex;
    private javax.swing.JButton bComex;
    private javax.swing.JButton bCortesia;
    private javax.swing.JButton bGeneral;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bPension;
    private javax.swing.JButton bPerdido;
    private javax.swing.JButton bProveedor;
    private javax.swing.JButton bSanPablo;
    private javax.swing.JButton bSello;
    private javax.swing.JButton bStarbucks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lYaexiste;
    private javax.swing.JRadioButton rManual;
    private javax.swing.JSlider sAuto;
    private javax.swing.JTextField tBoleto;
    private javax.swing.JTextField tCodigo;
    private javax.swing.JTextField tEntrada;
    private javax.swing.JTextField tEstancia;
    private javax.swing.JTextField tFecha;
    private javax.swing.JTextField tHoraent;
    private javax.swing.JTextField tHorasal;
    private javax.swing.JTextField tImporte;
    // End of variables declaration//GEN-END:variables
}
